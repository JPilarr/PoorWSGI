<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<book lang="cs">
  <bookinfo>
    <title>Poor Http - Python http server</title>

    <author>
      <firstname>Ondřej</firstname>

      <surname>Tůma</surname>

      <affiliation>
        <orgname></orgname>
      </affiliation>
    </author>

    <pubdate></pubdate>
  </bookinfo>

  <chapter>
    <title>Úvod</title>

    <section>
      <title>Co je Poor Http a Poor Publisher</title>

      <para>Poor Http je webový HTTP 1.0 server naprogramovaný v jazyku python
      za pomocí základních tříd pythonu. Jeho rozhzhraní je psáno kompatibilně
      s rozhraním modulu Apache mod_python jak jen to je možné. Přesto se
      některé metody chovají odlišně, nebo nejsou vůbec podporovány. V rámci
      zastupitelnosti je ale brán zřetel alespoň na existence metod a
      parametrů. V případě že naleznete nějaké chybějcící vlastnosti v
      objektech aplikačního rozhraní, neváhejte své požadavky zasílat autorovi
      aplikace, nebo do příslušných konferencí projektu na stránkách <ulink
      url="???">http://sourceforge.net/projects/poorhttp</ulink>.</para>

      <para>Poor Publisher proti tomu doplňuje knihovnu api modulu mod_python
      tak, aby chybějící funkčnost z poor http byla doplněna. Jedná se zejména
      o intepretaci souboru dipatch_table.py a jeho specifického formátu a
      dále o několik dalších aplikačních rozšíření.</para>
    </section>

    <section>
      <title>Získání serveru a knihovny</title>

      <para>Server i knihovna jsou společně distribuovány ve formě zdrojových
      kódů a to jak v archívu tar.bz nebo zip, tak prostřednictvím svn. Jejich
      kód je možný získat na stránkách projektu http://poorhttp.zeropage.cz
      nebo na stránkách svn hostitele <ulink
      url="???">http://sourceforge.net/projects/poorhttp</ulink>. V případě
      svn se obsah repozitáře stahuje následujícím příkazem:</para>

      <programlisting language="bash">$ svn co http://sourceforge.net/projects/poorhttp poorhttp</programlisting>

      <para>V případě získání archivu jej stačí rozbalit. Adresářová struktura
      z obou zdrojů obsahuje následující podadresáře:</para>

      <itemizedlist>
        <listitem>
          <para>poorhttp - spustitelná binárka http serveru s dalšími python
          knihovnami serveru.</para>
        </listitem>

        <listitem>
          <para>poorpublisher - rozšíření modulu mod_python a ukázkový
          .htaccess soubor.</para>
        </listitem>

        <listitem>
          <para>etc - ukázkový konfigurační soubor serveru.</para>
        </listitem>

        <listitem>
          <para>init.d - startovací bash script. Ten je doporučeno
          zakomponovat mezi ostatní init stripty v systému, a to buď instalací
          do init.d subsystému, nebo jej pouštět například přes
          rc.local.</para>
        </listitem>

        <listitem>
          <para>app - konfigurovatelný adresář, ve kterém se musí nachází
          uživatelská aplikace, resp. soubor dispatch_table.py</para>
        </listitem>

        <listitem>
          <para>log - místo určené k zapisu logů serveru a případně i
          aplikace.</para>
        </listitem>

        <listitem>
          <para>run - konfigurovatelný adresář určený pro zápis pid
          souboru.</para>
        </listitem>

        <listitem>
          <para>www - adresář přístupný prostřednictvím http serveru.</para>
        </listitem>
      </itemizedlist>

      <para>Všechny adresáře až na poorpublisher patří, k http serveru.
      Poorpublisher využívá adresářovou strukturu konfigurovanou pro http
      server Apache.</para>
    </section>

    <section>
      <title>Licence</title>

      <para>Http server i publisher je distribuován pod licencí BSD což
      zaručuje jeho případné použití v libovolném projektu.</para>
    </section>
  </chapter>

  <chapter>
    <title>Poor Http</title>

    <section>
      <title>Instalace</title>

      <para>Instalace spočívá v rozbalení archívů či zkopírování souborů na
      správné místo. V následující ukázce je server nainstalován do adresářové
      struktury umístěné v /srv/. V případě že chcete strukturu umístit do
      jiného adresáře, je nutné upravit příslušné soubory, viz
      konfigurace.</para>
    </section>

    <section>
      <title>Konfigurace</title>

      <para>Server je konfigurován ini souborem poorhttp.ini. Ten je rozdělěn
      do tří sekcí http, mime-type a application. Je samozřejmě možné do
      souboru přidat další vlastní sekce, a ty pak prostřednictvím API číst,
      je však doporučováno toto nedělat.</para>

      <section>
        <title>sekce http</title>

        <para>Sekce http slouží k nastavení serveru. Obsahuje tyto
        prvky:</para>

        <itemizedlist>
          <listitem>
            <para>port - tcp port na kterém server naslouchá.</para>

            <para>Hodnota může být přepsána prostřednictvím parametru v init
            scriptu.</para>
          </listitem>

          <listitem>
            <para>address - ip adresa na které server naslouchá. Pokud má
            server naslouchat na všech známých IP adresách v systému, hodnota
            musí být 0.0.0.0.</para>

            <para>Hodnota může být přepsána prostřednictvám parametru v init
            scriptu.</para>
          </listitem>

          <listitem>
            <para>pidfile - soubor do kterého se zapisuje číslo procesu v
            systému (pid). Tento soubor je používán zejména init striptem pro
            získání informací o stavu serveru.</para>

            <para>Hodnota může být přepsána prostřednictvím parametru v init
            scriptu.</para>
          </listitem>

          <listitem>
            <para>type - typ serveru, může nabývat jedné z následujících
            hodnot, přičemž implicitní je Single:</para>

            <itemizedlist>
              <listitem>
                <para>single - Server pracuje v single process módu. To
                znamená že jen jeden proces obsluhuje spojení, v případě více
                spojení ve stejný okamžik spojení čeká, až se server vyřídí
                požadavek předchozí. Tento mód je výkonný, nicméně blokující a
                server může být snadno zablokován jediným pomalým
                spojením.</para>
              </listitem>

              <listitem>
                <para>forking - Server při každém novém požadavku vytvoří
                kopii procesu, která jej pak obslouží. Tzv. fork procesu se
                provádí až po vytvoření spojení, to znamená, že nedochází k
                vytvoření procesů do zásoby, tak jak to dělá prefork režim u
                serveru Apache. Vzhledem k tomu že python používá vlastní
                implementaci vláken, která nepoužívá systémový vlákna, je
                doporučené tento režim používat zejména na více procesorových
                systémech.</para>
              </listitem>

              <listitem>
                <para>threading - Server při každém novém požadavku vytvoří
                vlákno, které požadavek zpracovává. V případě jednoprosorových
                systémů je tento režim dostačující. Jedno spojení neblokuje
                ostatní a server zvládá obsloužit více požadavků
                najedno</para>
              </listitem>
            </itemizedlist>

            <para>Na stránkách [url] je k dispozici porovnání výkonu
            jednotlivých režimů.</para>
          </listitem>

          <listitem>
            <para>secretkey - klíč, který je použit pro šifrování samonosné
            cookie. Pokud není klíč nastavený, je použit identifikátro ze svn
            commitu.</para>
          </listitem>

          <listitem>
            <para>debug - v tomto režimu je vypne optimalizaci při spuštění,
            to znamená že init script nepoužívá přepínač -O a zároveň je
            zapnutý debug mód. Ten se uživatelsky projeví zejména výpisem
            traceback v chybové stránce 500 - Internal Server Error.
            Implicitně je hodnota False.</para>
          </listitem>

          <listitem>
            <para>autoreload - pokud je hodnota nastavena na True, server
            testuje zda některý ze souborů které používá není změněn. V
            takovém případě se pokusí soubor načíst znovu. Implicitní hodnota
            je False.</para>
          </listitem>

          <listitem>
            <para>webmaster - mailová adresa zobrazovaná na chybových
            stránkých.</para>
          </listitem>

          <listitem>
            <para>errorlog - soubor do které se zapisují chybové hlášky
            serveru, a průběh startu, resp ukončení serveru.</para>
          </listitem>

          <listitem>
            <para>accesslog - soubor do kterého se zapisují přístupy. Výstup
            není nastavitelný, ale je obdobný jako u serveru Apache.</para>
          </listitem>

          <listitem>
            <para>application - cesta k webové aplikaci, resp adresáři, kde je
            uložen soubod dispatch_table.py</para>
          </listitem>

          <listitem>
            <para>document_root - cesta k souborům, které jsou přístupné přes
            webový server. Server momentálně nepodporuje výpis adresářů, ale
            pokud je tato cesta nastavená, jsou odesílány http klientům
            standardním způlsobem s mime_type nastaveným v sekci mime_tepe.
            Implicitní hodnota je None.</para>
          </listitem>
        </itemizedlist>

        <para></para>
      </section>

      <section>
        <title>sekce mime_type</title>

        <para>Sekce obsahuje definici mime_typů dle přípon souborů. Tato sekce
        je využívána jen v případě že je nastaven parametr document_root v
        sekci http. Příklad zápisu jednotlivých typů:</para>

        <programlisting language="ini">css = text/css
htm = text/html
html = text/html
js = text/javascript</programlisting>
      </section>

      <section>
        <title>sekce application</title>

        <para>Uživatelská sekce určená ke konfiguraci hodnot webové aplikace.
        Hodnoty jsou čteny prostřednictvím metody get_option objektu Request,
        obdobně jak tomu je v případě serveru Apache a modulu mod_python.
        Příklad zápisu:</para>

        <programlisting  language="ini">user        = admin
password    = admin
inifile     =   /srv/one-web/etc/one-web.ini</programlisting>
      </section>

      <section>
        <title>Spuštění</title>

        <para>V případě, že je server nakopírován do správné adresářové
        struktury, jsou správně nastaveny všechny hodnoty, v souboru
        poorhttp.ini, lze přistoupit k samotnému spuštění serveru. To se lze
        provést buď přímo z příkazové řádky:</para>

        <programlisting language="bash">$ ./poorhttp --config=./poorhttp.ini &amp;</programlisting>

        <para>python script soubor poorhttp má volitelné vstupní parametry,
        jejich volby je možné vypsat parametrem --help, nebo jen zkáceným -h.
        Mezi ty nejdůležitější patří:</para>

        <itemizedlist>
          <listitem>
            <para>--config= - nastavuje cestu k souboru poorhttp.ini,
            implicitní hodnota je ./poorhttp.ini, tedy soubor poorhttp.ini v
            aktuálním adresáři.</para>
          </listitem>

          <listitem>
            <para>--pidfile= - nastavuje cestu k souboru do kterého se zapíše
            hodnota pid, tedy číslo procesu v systému.</para>
          </listitem>

          <listitem>
            <para>--address= - nastavuje IP adresu, na které server
            naslouchá.</para>
          </listitem>

          <listitem>
            <para>--port= - nastavuje TCP port na kterém server
            naslouchá.</para>
          </listitem>
        </itemizedlist>

        <para>Veškeré tyto parametry přetěžují hodnoty uvedené v configuračním
        souboru.</para>
      </section>
    </section>

    <section>
      <title>Proxy server</title>

      <para>Tato kapitola nemá za cíl detailně popisovat konfiguraci
      jednotlivých http serverů jako proxy, zato ukáže důležitou základní část
      konfiguračního souboru.</para>

      <section>
        <title>Lighttpd</title>

        <para>Lighttpd je lehký http server s podporou proxování v režimu load
        balancer. Více informací se dovíze na stránkách projektu: <ulink
        url="???">http://lighttpd.net</ulink>.</para>

        <programlisting  language="httpd"># nahraní modulu proxy
server.modules   += ( "mod_proxy" )

## Balance algorithm, possible values are: "hash", "round-robin" or "fair" (default)
# proxy.balance     = "hash" 

# konfigurace hosta, který je proxovaný
$HTTP["host"] == "galery.dev" {
  proxy.server  = ( "" =&gt; (  (  "host" =&gt; "127.0.1.1",
                                "port" =&gt; "8081") ) )
#                             (  "host" =&gt; "127.0.1.1",
#                                "port" =&gt; "8182")  ) ) 
}

# subdoména na sloužící k výdeji statických obrázků vydává obrázky přímo z filesystému
$HTTP["host"] == "img.galery.dev" {
    server.document-root = "/srv/new-one/www/img"
}</programlisting>
      </section>

      <section>
        <title>Nginx</title>

        <para></para>
      </section>

      <section>
        <title>Apache</title>

        <para></para>
      </section>
    </section>
  </chapter>

  <chapter>
    <title>Poor Publisher</title>

    <section>
      <title>Instalace</title>

      <para>Instalace spočívá v rozbalení adresáře poorpublisher z archívů či
      zkopírování souborů na místo, kde se bude nacházet webová aplikace.
      Následující ukázka předpokládá, že takové místo je
      /var/www/my-app.</para>
    </section>

    <section>
      <title>Konfigurace</title>

      <para>Následující text popisuje základní způsob jak nakonfigurovat
      server Apache s mod_python modulem tak, aby obsluhu pomocí
      poor_publisheru sám mohl majitel aplikace konfigurovat prostřednictvím
      souboru .htaccess. Další možé konfiguační hodnoty nebude text rozebírat.
      V případě zájmu je možné studovat dokumentaci zabývající se přímo
      konfigurací serveru Apache (<ulink
      url="???">http://http.apache.org/doc</ulink>) či jeho modulu mod_python
      (<ulink url="???">http://mod_python.org</ulink>).</para>

      <para>Konfigurační soubor serveru Apache by měl obsahovat následující či
      podobné hodnoty:</para>

      <programlisting language="httpd"># inicializace modulu mod_python
LoadModule python_module /usr/lib/apache2/modules/mod_python.so

# název souboru .htaccess
AccessFileName .htaccess

# zakázaní zveřejnění .htaccess souboru
&lt;Files ~ "^\.htaccess"&gt;
    Order allow,deny
    Deny from all
    Satisfy all
&lt;/Files&gt;

# akceptace souboru .htaccess v adresáři aplikace
&lt;Directory /var/www/my-app&gt;

&lt;/Directory&gt;</programlisting>

      <para>Soubor .htaccess v adresáři /var/www/my-app by mohl vypadat
      takto:</para>

      <programlisting  language="httpd"># o oblsuju teto url se bude starat mod_python
SetHandler mod_python

# se zapnutym debugem
PythonDebug On

# automaticky bude reloadovat aktualizované soubory
PythonAutoReload On

# python bude volat metodu z poorpublisheru v zadane ceste
PythonHandler /var/www/my-app/poorpublisher.py
PythonPath "['/var/www/my-app'] + sys.path"

# nastaveni klice pro kryptovani samonosne cookie
PythonOption secretkey = a79470ca0d18db24fe86aabd78c2bd409d7e36d9

# staticke soubory budou obslouzeny implicitnim způsobem
&lt;Files ~ "\.(gif|html|jpg|png|css|js)$"&gt;
   SetHandler default-handler
&lt;/Files&gt;</programlisting>

      <para>V případě že server Apache běží v režimu prefork, nebude
      PythonAutoReload pracovat stoprocetně. Proto je doporučeno pro účely
      ladění nakonfigurovat Apache jen na jeden běžící proces. Další
      konfigurační hodnoty webové aplikace lze nastavovat přes PythonOption
      podobně jako secretkey. Nebo lze nstavit cestu k ini souboru, a v něm
      pak bude kompletní konfigurace aplikace.</para>
    </section>
  </chapter>

  <chapter>
    <title>API</title>

    <para>Kapitola API popisuje základní společné API. Jde o přidanou hodnotu
    ve formě vlastního mechanismu na správu aplikačních metod. Dále je zde
    popsán základní mechanismus práce, který je vychází z mod_pythonu. Tedy
    tvorba obslužných funkcí, zpracování uživatelského vstupu, ošetření stavu
    nahrávaného souboru. V druhé půlce kapitoly naleznete způsob práce se
    samonosnou cookie, kterou definuje až Poor Http a Poor Publisher, definici
    vlastních chybových stránek a na závěr rozdíly mezi Poor Http serverem -
    jeho objekty a Apachem, resp. modulem mod_python a jeho objekty.</para>

    <section>
      <title>dispatch_table.py</title>

      <para>Soubor dispatch_table.py je základním vstupním souborem pro obě
      popisované komponenty. Tento soubor musí, resp. může obsahovat několik
      částí, které jsou samostatně zpracovávány.</para>

      <para>Soubor dispatch_table.py samozřejmě může obsahovat i jednotlivé
      funkce, konstatnty a vlastně i celý kód aplikace. Ten je však vhodné dát
      do jiných externích souborů souborů.</para>

      <section>
        <title>slovník handlers</title>

        <para>Jedinou podmíněnou komponentou souboru dispatch_table.py je
        slovník handlers. Ten pak musí obsahovat pár metoda a tuple typ metody
        a funkce, která metodu obslouží. Funkce v parametru dostane objekt
        Request</para>

        <programlisting language="python">handlers = {
   '/'             : (http.METHOD_GET, index),
   '/login'        : (http.METHOD_GET, login),
   '/dologin'      : (http.METHOD_POST, dologin),
   '/dologout'     : (http.METHOD_GET_POST, dologout),
}</programlisting>

        <para>Typ METHOD_GET_POST značí, že metoda aplikace bude obsloužena
        jak v případě GET tak POST požadavku. V případě že nějaká metoda
        aplikace má nastavený pouze typ METHOD_POST, nebude obsloužena GET
        požadavkem a server vrátí chybu 404 Not Found. Z výše popsaného také
        vyplývá, že každý typ požadavku může být obsloužen jinak. Například
        metoda / může mít obsluhu na typ METHOD_HEAD, která bude jen testovat
        ostatní komponenty aplikace, třeba spojení do databáze.</para>
      </section>

      <section>
        <title>slovník errors</title>

        <para>Slovník errors je nepovinný a musí obsahovat páry http_chyba,
        funkce obsluhy chyb. Stejně jako funkce obsluhující metodu aplikace, i
        funkce obsluhující http chybu dostávají v parametru objekt Request.
        Tento slovník se tedy používá, chceme-li obsloužit chybové stavy
        aplikace vlastními stránkami. V případě, že potřebujeme rozlišit
        obsluhu různých druhů výjimek v aplikaci, můžeme v handleru chyby 500
        testovat hodnotu sys.exc_type.</para>

        <programlisting language="python">errors = {
   http.HTTP_INTERNAL_SERVER_ERROR : my_internal_server_error,
   http.HTTP_NOT_FOUND : my_page_not_found,
}</programlisting>

        <para>Jak má vypadat metoda pro obsluhu chybových stavů, tedy jiných
        než 200 je popsáno v sekci 6 vlastní funkce obsluhující chybové
        stavy.</para>
      </section>

      <section>
        <title>funkce setreq</title>

        <para>Funkce setreq pokud je v souboru dispatch_table.py definována,
        je volána před každou obsluhou http požadavku, tedy ještě dříve než je
        známa informace, zda tento požadavek může být vůbec obsloužen. Tato
        funkce se hodí například na zpracování konfigurace, případě
        před-vypočítání nějakých hodnot. Stejně jako ostatní handlery
        (obsluhující funkce) i tento dostává v parametru objekt
        Request.</para>

        <programlisting language="python">init = False
re_mail = None

def setreq(req):
   global re_mail
   global init

   if not init:
       re_mail = re.compile("^[a-z0-9\-_\.]+@[a-z0-9\-_\.]+$")

       req.log_error('Reinicalizace ...', http.LOG_DEBUG)
       init = True
   #endif
   
   req.re_mail = re_mail
#enddef</programlisting>

        <para>V ukázce je využíváno situace, kdy apache je puštěn v režimu
        prefork, nebo poor http v režimu single příp. thread. Tyto režimy
        importují soubor dispatch_table.py jen jednou, případně jednou za N
        požadavků. Díky tomu je možné v jeho namespace nastavit nějaké
        proměnné, které pak zjišťují poslední stav, a jeli to třeba provedou
        příslušnou inicializaci. Zkompilování regulárního výrazu je samozřejmě
        jen příklad, protože to se může dít přímo v souboru mimo jakou-koli
        funkci. Po testování této funkce, se v při různých režimech serveru
        objeví v logu hlášení o reinicializaci různě často.</para>
      </section>
    </section>

    <section>
      <title>obslužné funkce</title>

      <para></para>
    </section>

    <section>
      <title>uživatelský vstup</title>

      <para></para>
    </section>

    <section>
      <title>status bar nahrávaného souboru</title>

      <para></para>
    </section>

    <section>
      <title>samonosná cookie</title>

      <para></para>
    </section>

    <section>
      <title>vlastní funkce obsluhující chybové stavy</title>

      <para></para>
    </section>

    <section>
      <title>rozdíl mezi Poor Http a mod_python</title>

      <para></para>
    </section>
  </chapter>
</book>
